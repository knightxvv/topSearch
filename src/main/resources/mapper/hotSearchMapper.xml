<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tx.mybatis.mapper.hotSearchMapper">

    <resultMap id="BaseResultMap" type="com.tx.hotsearch.dao.hotSearch">
        <result column="id" jdbcType="INTEGER" property="id" />
        <result column="time" jdbcType="VARCHAR" property="time" />
        <result column="title" jdbcType="VARCHAR" property="title" />
        <result column="content" jdbcType="VARCHAR" property="content" />
        <result column="score" jdbcType="INTEGER" property="score" />
        <result column="ranking" jdbcType="INTEGER" property="ranking" />
        <result column="playcount" jdbcType="INTEGER" property="playcount" />
        <result column="website" jdbcType="VARCHAR" property="website" />
    </resultMap>

    <select id="selectHotSearch" resultMap="BaseResultMap">
        SELECT * FROM t_hotsearch order by time desc limit 1
    </select>
    
    <insert id="insertHotSearch" useGeneratedKeys="true" keyProperty="id">
      insert into t_hotsearch(time,title,content,score,ranking,playcount,website)
      values (#{time},#{title},#{content},#{score},#{ranking},#{playcount},#{website})
    </insert>
    
    <insert id="insertHotSearchOfWebsite" useGeneratedKeys="true" keyProperty="id">
      insert into t_hotsearch(time,title,content,score,ranking,playcount,website)
      values 
      <foreach collection ="list" item="item" separator =",">
            (#{item.time},#{item.title},#{item.content},#{item.score},#{item.ranking},#{item.playcount},#{item.website})
      </foreach >
    </insert>
    
    <select id="selectLatestHotSearchByWebsite" resultMap="BaseResultMap">
        SELECT * FROM t_hotsearch 
        where time=(select distinct(time) from t_hotsearch where website=#{website} order by time desc limit 1 ) 
        and website=#{website}
    </select>
    
    <select id="selectLatestHotSearchByWebsiteTopN" resultMap="BaseResultMap">
        SELECT * FROM t_hotsearch 
        where time=(select distinct(time) from t_hotsearch where website=#{website} order by time desc limit 1 ) 
        and website=#{website} order by ranking limit #{count}
    </select>
    
    <select id="searchTitleByKeyword" resultType="java.util.HashMap">
<!--         SELECT distinct(title),website FROM t_hotsearch where title like CONCAT('%',#{keyword},'%'); -->
        SELECT distinct(t.title) as title,t.website,DATE_FORMAT(max(t.time),'%Y-%m-%d %H:%i:%S') as time,w.name 
        FROM t_hotsearch t join t_website w where t.title like CONCAT('%',#{keyword},'%') and t.website=w.website group by title order by time;
    </select>
    
    <select id="selectHotSearchByTitle" resultMap="BaseResultMap">
        SELECT * FROM t_hotsearch 
        where title=#{title} and website=#{website} order by time
    </select>
    
    <select id="selectTimeListByDate" resultType="java.lang.String">
        SELECT distinct(DATE_FORMAT(time,'%H:%i:%S')) as time FROM t_hotsearch where DATE_FORMAT(time,'%Y-%m-%d')=#{date} and website=#{website} order by time
    </select>
    
    <select id="selectHotSearchByDate" resultMap="BaseResultMap">
        SELECT * FROM t_hotsearch where DATE_FORMAT(time,'%Y-%m-%d')=#{date} and website=#{website} and ranking &lt;=#{topN};
    </select>
    
    <select id="getDetailOfHotSearch" resultType="java.util.HashMap">
        SELECT max(score) as maxScore,min(score) as minScore,max(ranking) as minRanking,min(ranking) as maxRanking,cast(avg(score) as DECIMAL(10,0)) as avgScore,
            DATE_FORMAT(min(time),'%Y-%m-%d %H:%i:%S') as minTime ,count(time) as count 
        FROM t_hotsearch where title=#{title} and website=#{website};
    </select>
    
    <select id="selectWebsiteHistoryTop" resultType="java.util.HashMap">
        select * from (select DATE_FORMAT(min(time),'%Y-%m-%d %H:%i:%S') as minTime,DATE_FORMAT(max(time),'%Y-%m-%d %H:%i:%S') as maxTime,
                                TIMESTAMPDIFF(HOUR, min(time) , max(time)) as duration,
                                count(time) as count,title,max(score) as maxScore,min(score) as minScore,website 
                        from (SELECT * FROM t_hotsearch where website=#{website} order by score desc) as tmp 
                        group by title) as t2
        order by ${rankTag} desc limit ${count};
    </select>
</mapper>